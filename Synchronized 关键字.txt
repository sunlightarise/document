1、基本简介
2、两种用法：对象锁，类锁
3、多线程访问同步方法的7种情况

Sysnchronized 性质：可重入、不可中断

加锁原理，可重入原理，可见性原理

Synchronized 缺陷：效率低，不够灵活，无法预判是否成功获得锁

Synchronized 的作用
同步方法支持一种简单的策略来防止县城和内存一致性错误；如果一个对象多个线程可见，则对该对象变量的所有读取或者写都是通过同步方法完成的

能够保证同一时刻最多只有一个线程执行该行代码或代码块，以达到并保证并发安全的效果

Synchronized 是 Java的关键字，被Java语言原生支持。


第一种用法：对象锁
方法锁（默认锁对象为this 当前实例对象）和同步代码块（手动指定锁对象）
类锁

第二种用法：类锁
指synchronized 修饰静态方法或指定锁为Class对象

Java 类可能有多个独享，但是只有一个Class对象
类锁锁的是Class 对象
类锁在同一时刻只能被一个对象拥有

1、synchronized 加在static 方法上
2、synchronized （*.class） 代码块


多线程访问同步方法的7种情况
1、2个线程同时访问一个对象的同步方法。（锁的是同一个对象，执行过程中会相互等待，线程同步）
2、2个线程访问的是两个对象的同步方法。（锁对象不同，无法线程同步）
3、两个线程访问的是synchronized的静态方法。（静态方法默认锁当前类势力，由于类实例只有一个所以，可以实现线程同步）
4、同时访问同步方法与非同步方法 （synchronized 只会作用与被修饰对象或者方法，不会影响其他对象或者方法）
5、访问同一个对象的不同的普通同步方法 （如果对象相同，两个方法被 sychronized 修饰的方法先后调用 只能被串行执行，因为他们锁的是同一个对象（当前对象））
6、同时访问静态synchronized 和非静态synchronized方法 （非静态类，锁对象指的是当前实例对象，静态类，锁的对象是当前类的类对象）
7、方法抛出异常后，会释放锁。 （抛出异常后，锁会被释放，下一个线程可以得到锁）

7 种情况总结：3点核心思想
1、一把锁只能同时被一个线程获取，没有拿到锁的线程必须等待（对应1、5情况）
2、每个实例都对应有自己的一把锁，不同实例之间互不影响，例外：锁对象是*.class 以及 synchronized 修饰的是static 方法的时候所有对象共用一把类锁，（对应2、3、4、6 种情况）
3、无论是方法正常执行完毕或者方法抛出异常，都会释放锁（对应7种情况）

